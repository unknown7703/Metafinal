21BBS0122 
T .Aatreya
COMPUTER NETWORKS LAB-2
Question â€“ 1: Write a chat program that enables real-time communication 
between 2 persons (Client and a server) using a UDP connection. The chat 
program needs to allow a user to type messages, which should be conveyed to the
other end (server) and displayed at the other end and vice versa.
The code has been written using Python.
Server-Side Code:
import socket
# Set up a UDP socket
server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
server_address = ('localhost', 12345)
server_socket.bind(server_address)
# Wait for incoming messages
while True:
 data, address = server_socket.recvfrom(1024)
 print(f"Received message: {data.decode('utf-8')} from {address}")
 
 # Echo back the message to the client
 server_socket.sendto(data, address)
Client-Side Code:
import socket
# Set up a UDP socket
client_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
# Prompt the user to enter a message
while True:
 message = input("Enter a message to send: ")
 
 # Send the message to the server
 client_socket.sendto(message.encode('utf-8'), ('localhost', 12345))
 
 # Wait for a response from the server
 data, server_address = client_socket.recvfrom(1024)
 print(f"Received message: {data.decode('utf-8')} from {server_address}")
Output:
Question 2: Develop a simple Web server (Even parity checker) that is capable 
of processing the request from client. Create a socket connection, when 
contacted by the client the server has to process the request and give back the 
result. (Using TCP). Provide acknowledgement number for every data received 
using the stop and wait strategy.
Server-Side Code:
import socket
SERVER_ADDRESS = ('localhost', 8000)
BUFFER_SIZE = 1024
def calculate_parity(data):
 # Calculate the parity bit for the input data
 parity = data.count('1') % 2
 return str(parity)
def handle_request(client_socket):
 # Receive data from the client
 data = client_socket.recv(BUFFER_SIZE).decode().strip()
 
 # Calculate the parity bit
 parity = calculate_parity(data)
 
 # Send the response back to the client
 response = f'{data}{parity}'
 client_socket.sendall(response.encode())
 
 # Wait for the acknowledgement from the client
 ack = client_socket.recv(BUFFER_SIZE).decode().strip()
 if ack == 'ACK':
 print('Data received successfully.')
 else:
 print('Error receiving acknowledgement.')
def run_server():
 # Create a TCP socket and bind it to the server address
 server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
 server_socket.bind(SERVER_ADDRESS)
 
 # Listen for incoming connections
 server_socket.listen(1)
 print(f'Server listening on {SERVER_ADDRESS[0]}:{SERVER_ADDRESS[1]}')
 
 while True:
 # Accept incoming connections
 client_socket, client_address = server_socket.accept()
 print(f'Connection from {client_address}')
 
 # Handle the client request
 handle_request(client_socket)
 
 # Close the client socket
 client_socket.close()
if __name__ == '__main__':
 run_server()
Client-Side Server:
import socket
SERVER_ADDRESS = ('localhost', 8000)
BUFFER_SIZE = 1024
def send_data(data):
 # Create a TCP socket and connect to the server
 client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
 client_socket.connect(SERVER_ADDRESS)
 
 # Send the data to the server
 client_socket.sendall(data.encode())
 
 # Wait for the response from the server
 response = client_socket.recv(BUFFER_SIZE).decode().strip()
 
 # Verify the parity bit and send an acknowledgement to the server
 parity = response[-1]
 data = response[:-1]
 expected_parity = str(data.count('1') % 2)
 if parity == expected_parity:
 ack = 'ACK'
 client_socket.sendall(ack.encode())
 print(f'Response received successfully: {data}')
 else:
 print('Error: Parity check failed.')
 
 # Close the client socket
 client_socket.close()
if __name__ == '__main__':
 data = '110000'
 send_data(data)
Output-